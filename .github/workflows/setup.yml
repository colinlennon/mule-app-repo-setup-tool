# This is a basic workflow to help you get started with Actions

name: mule-app-repo-setup-tool

on:
  workflow_dispatch:
    inputs:
      raml-asset-id:
        description: 'Asset ID of RAML Specification in Exchange'
        type: string
      raml-version:
        description: 'Version of RAML Specification in Exchange'
        type: string
      github-pat:
        description: 'GitHub Personal Access Token'
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    
    env:
      GH_TOKEN: ${{ github.event.inputs.github-pat }}
      API_ARTIFACT_ID: ${{ github.event.inputs.raml-asset-id }}
      API_VERSION: ${{ github.event.inputs.raml-version }}
      

    steps:
      - name: Setup Java JDK
        uses: actions/setup-java@v3.3.0
        with:
         distribution: 'temurin'
         java-version: '11'
       
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.3
        with:
          maven-version: 3.8.2
        
        # NOTE: server id should be anypoint-exchange-v3 for DTEF
      - name: Setup Maven Settings
        uses: s4u/maven-settings-action@v2.6.0
        with:
           servers: |
            [{
                "id": "anypoint-exchange-v3",
                "username": "~~~Client~~~",
                "password": "${{ secrets.EXCHANGE_CA_CLIENT_ID }}~?~${{ secrets.EXCHANGE_CA_CLIENT_SECRET }}"
            },
            {
                "id": "mulesoft-releases-ee",
                "username": "${{ secrets.RELEASES_EE_USERNAME }}",
                "password": "${{ secrets.RELEASES_EE_PASSWORD }}"
            }]
          
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      # Checks-out this repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Checks-out the template under $GITHUB_WORKSPACE/template, so your job can access it
      # Need to change repository identifier
      - uses: actions/checkout@v3
        with:
          repository: colinlennon/mule4-rest-api-template
          ref: main
          token: ${{ github.event.inputs.github-pat }}
          path: template
        
      - name: Update pom.xml
        run: |
          cd template
          echo "Replacing project.artifactId..."
          ARTIFACT_ID=$API_ARTIFACT_ID-impl
          echo "ARTIFACT_ID: $ARTIFACT_ID"          
          ARTIFACT_ID_LINE_NUM=$(grep -n "<!-- PLACEHOLDER: project.artifactId -->" pom.xml | cut -d : -f 1) # TODO put placeholders in the template
          let "ARTIFACT_ID_LINE_NUM=ARTIFACT_ID_LINE_NUM+1"
          sed -i "${ARTIFACT_ID_LINE_NUM}s|<artifactId>.*</artifactId>|<artifactId>${ARTIFACT_ID}</artifactId>|" pom.xml
          sed -i '/<!-- PLACEHOLDER: project.artifactId -->/d' pom.xml
          
          echo "Replacing project.version..."
          VERSION_LINE_NUM=$(grep -n "<!-- PLACEHOLDER: project.version -->" pom.xml | cut -d : -f 1)
          let "VERSION_LINE_NUM=VERSION_LINE_NUM+1"
          sed -i "${VERSION_LINE_NUM}s|<version>.*</version>|<version>0.0.1</version>|" pom.xml
          sed -i '/<!-- PLACEHOLDER: project.version -->/d' pom.xml

          echo "Removing rest-api-template-spec dependency..."
          API_GROUP_ID=4662d833-1567-4253-b115-eb71a03c7051
          # TODO: get API_GROUP_ID dynamically using line below. Maven settings need to be configured for this to work.
          #API_GROUP_ID=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.groupId -q -DforceStdout)
          REST_API_TEMPLATE_DEPENDECY_START=$(grep -n "<!-- START: rest-api-template dependency -->" pom.xml | cut -d : -f 1) # TODO: put this in the template
          REST_API_TEMPLATE_DEPENDECY_END=$(($REST_API_TEMPLATE_DEPENDECY_START + 7))
          REST_API_TEMPLATE_DEPENDECY_END="${REST_API_TEMPLATE_DEPENDECY_END}d"
          RES=$(sed -i "$REST_API_TEMPLATE_DEPENDECY_START,$REST_API_TEMPLATE_DEPENDECY_END" pom.xml)
          
          echo "Adding API spec dependency..."
          API_GROUP_ID=4662d833-1567-4253-b115-eb71a03c7051 # TODO get dynamically
          API_ARTIFACT_ID=${{ github.event.inputs.raml-asset-id }}
          
          API_SPEC_DEPENDENCY=$"<dependency>\\n"
          API_SPEC_DEPENDENCY+=$"                    <groupId>$API_GROUP_ID</groupId>\\n"
          API_SPEC_DEPENDENCY+=$"                    <artifactId>$API_ARTIFACT_ID</artifactId>\\n"
          API_SPEC_DEPENDENCY+=$"                    <version>$API_VERSION</version>\\n"
          API_SPEC_DEPENDENCY+=$"                    <classifier>raml</classifier>\\n"
          API_SPEC_DEPENDENCY+=$"                    <type>zip</type>\\n"
          API_SPEC_DEPENDENCY+=$"                </dependency>"
          sed -i "s,<\!-- PLACEHOLDER: api-spec dependency -->,$API_SPEC_DEPENDENCY," pom.xml # TODO add placeholder to pom.xml
          cat pom.xml       # remove
          
      - name: Update api.xml
        run: |
          cd template
          RES=$(sed -i "s+name=\"api-httpListenerConfig\"+name=\"$API_ARTIFACT_ID-httpListenerConfig\"+" src/main/mule/api.xml)
          RES=$(sed -i "s+<apikit:config name=\"api-config\"+<apikit:config name=\"$API_ARTIFACT_ID-config\"+" src/main/mule/api.xml)
          #	- Search for and replace: api="resource::9603fc66-9985-4754-8a84-6dfcfc3b2d72:rest-api-template-spec:1.0.1:raml:zip:api.raml" (note: will need to update this for Bayer template)
          RES=$(sed -i "s+api=\"resource::4662d833-1567-4253-b115-eb71a03c7051:rest-api-template-spec:1.0.0:raml:zip:api.raml\"+api=\"resource::$API_GROUP_ID:$API_ARTIFACT_ID:$API_VERSION:raml:zip:$API_ARTIFACT_ID.raml\"+" src/main/mule/api.xml)
          RES=$(sed -i "s+<http:listener config-ref=\"api-httpListenerConfig\"+<http:listener config-ref=\"$API_ARTIFACT_ID-httpListenerConfig\"+" src/main/mule/api.xml)
          RES=$(sed -i "s+<apikit:router config-ref=\"api-config\"+<apikit:router config-ref=\"$API_ARTIFACT_ID-config\"+" src/main/mule/api.xml)
          RES=$(sed -i "s+<flow name=\"api-main\">+<flow name=\"$API_ARTIFACT_ID-main\">+" src/main/mule/api.xml)
          RES=$(sed -i "s+<flow name=\"get:\\\ping:api-config\">+<flow name=\"get:\ping:$API_ARTIFACT_ID-config\">+" src/main/mule/api.xml) 
          
      - name: Update global.xml
        run: |
          cd template
          RES=$(sed -i "s+flowRef=\"api-main\"+flowRef=\"$API_ARTIFACT_ID-main\"+" src/main/mule/common/global.xml)
          
      - name: Rename Mule configuration files
        run: |
          cd template
          RES=$(mv src/main/mule/api.xml src/main/mule/${API_ARTIFACT_ID}-api.xml)
          RES=$(mv src/main/mule/implementation/api-impl.xml src/main/mule/implementation/${API_ARTIFACT_ID}-api-impl.xml)
          
      - name: Create new repo
        run: |
          mv template $API_ARTIFACT_ID
          cd $API_ARTIFACT_ID
          rm -rf .git
          git config --global user.email "clennon@mulesoft.com"   # Change for Bayer
          git config --global user.name "Colin Lennon".           # Change for Bayer
          git init
          git add -A
          git commit -m "Initial commit (from mule-app-setup-script)"
          git branch -M main
          #curl -X POST -H "Authorization: token $GITHUB_PAT" https://api.github.com/user/repos -d "{\"name\": \"$API_ARTIFACT_ID\"}"          
          #git push -u origin main     
          gh repo create $API_ARTIFACT_ID --public    # visibility should be internal for Bayer, not public. Name should be in org/name format.
          echo "Adding remote..."
          git remote add origin https://github.com/colinlennon/$API_ARTIFACT_ID.git    # Will need to update org name for Bayer
          echo "Unsetting headers..."
          git config --unset-all http.https://github.com/.extraheader
          echo "Pushing to GitHub... (https://token:$GITHUB_PAT@github.com/colinlennon/$API_ARTIFACT_ID.git)"
          git push -u origin main --prune https://token:$GITHUB_PAT@github.com/colinlennon/$API_ARTIFACT_ID.git
        
      # TODO:
      # - search/replace in workflow YAML file (before creating repo)
      # - create repo environments
      # - create GH repo secrets
      # - create branch protection on main branch
      # - consider storing GitHub PAT as repo secret
          
